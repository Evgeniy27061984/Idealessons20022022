package thebyteguru12.game.level;

import thebyteguru12.graphics.TexturesAtlas;
import thebyteguru12.utils.Utils;
import thebyteguru12.game.Game;


import java.awt.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Level {
    //tmp
//    public static final int [][] lvl = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
//            ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,3,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,3,0,3,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,3,0,3,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,},
//            {0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,2,0,0,3,0,0,0,0,0,3,0,0,0,0,0,0,},
//
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
//    };

    //tmp


    private static final int TITLE_SCALE = 8; // ТАК КАК КВАДРАТНЫЙ
    private static final int TITLE_IN_GAME_SCALE = 2; // если хотим изменить размер
    private static final int SCALED_TILE_SIZE = TITLE_SCALE * TITLE_IN_GAME_SCALE; // перемножение
    private static final int TITLE_IN_WIDTH = Game.WIDTH/SCALED_TILE_SIZE; //после debug 50
    // СКОЛЬКО TILES В ШИРИНУ
    // Game.WIDTH - размер нашего экрана в пикселях
    private static final int TITLE_IN_HEIGHT = Game.HEIGHT/SCALED_TILE_SIZE; //после debug 37

    private Integer [] [] tileMap; // кол-во tile в ширину и высоту
    // и к каждому tile привяжем число и число будет показывать какое число будет находиться
    private Map<TileType, Tile> tiles;
    private List <Point> grassCords;




    public Level(TexturesAtlas atlas) {
        tileMap = new Integer[TITLE_IN_WIDTH][TITLE_IN_HEIGHT];
        tiles = new HashMap<TileType, Tile>();
        //положим все картинки в map
        tiles.put(TileType.BRICK, new Tile(atlas.cut(32 * TITLE_SCALE,0 * TITLE_SCALE,
                TITLE_SCALE,TITLE_SCALE), TITLE_IN_GAME_SCALE,TileType.BRICK));
        tiles.put(TileType.METAL, new Tile(atlas.cut(32 * TITLE_SCALE,2 * TITLE_SCALE,
                TITLE_SCALE,TITLE_SCALE), TITLE_IN_GAME_SCALE,TileType.METAL));
        tiles.put(TileType.WATER, new Tile(atlas.cut(32 * TITLE_SCALE,4 * TITLE_SCALE,
                TITLE_SCALE,TITLE_SCALE), TITLE_IN_GAME_SCALE,TileType.WATER));
        tiles.put(TileType.GRASS, new Tile(atlas.cut(34 * TITLE_SCALE,4 * TITLE_SCALE,
                TITLE_SCALE,TITLE_SCALE), TITLE_IN_GAME_SCALE,TileType.GRASS));
        tiles.put(TileType.ICE, new Tile(atlas.cut(36 * TITLE_SCALE,4 * TITLE_SCALE,
                TITLE_SCALE,TITLE_SCALE), TITLE_IN_GAME_SCALE,TileType.ICE));
        tiles.put(TileType.EMPTY, new Tile(atlas.cut(36 * TITLE_SCALE,6 * TITLE_SCALE,
                TITLE_SCALE,TITLE_SCALE), TITLE_IN_GAME_SCALE,TileType.EMPTY));

        tileMap = Utils.levelParse("res/Level.lvl");
        grassCords = new ArrayList<Point>();
        for (int i = 0; i < tileMap.length ; i++) {
            for (int j = 0; j < tileMap[i].length; j++) {
                Tile tile = tiles.get(TileType.fromNumeric(tileMap[i][j]));
                if (tile.type() == TileType.GRASS)
                    grassCords.add(new Point( j * SCALED_TILE_SIZE,i * SCALED_TILE_SIZE));

            }
        }

//        tileMap = lvl;

//        tileMap = new int [TITLE_IN_WIDTH] [TITLE_IN_HEIGHT]; //карта levela
//        tileMap [10][10] = TileType.BRICK.numeric(); // создание текстур
//        tileMap [11][11] = TileType.BRICK.numeric();
//        tileMap [12][12] = TileType.ICE.numeric();
//        tileMap [13][13] = TileType.ICE.numeric();
//        tileMap [14][14] = TileType.BRICK.numeric();
    }
    public void update () {

    }

    public void render (Graphics2D g) {
        // заполняем наши tile
        for (int i = 0; i < tileMap.length; i++) {
            for (int j = 0; j < tileMap[i].length; j++ ) {
                Tile tile = tiles.get(TileType.fromNumeric(tileMap[i][j]));
                if (tile.type() != TileType.GRASS)
                tile.render(g,j * SCALED_TILE_SIZE,i * SCALED_TILE_SIZE);

                // [j][i] чтоб картинка не была перевернута
                // tileMap[j][i] держит какое число По дефолту держит нули
                // TileType.fromNumeric(tileMap[j][i])) - здесь уже не цифра а TileType
            }
        }
    }
    public void renderGrass (Graphics2D g) {
        for (Point p : grassCords) {
            tiles.get(TileType.GRASS).render(g, p.x, p.y);
        }

    }

}
